<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ai.dao.AuthUserDao">
  <resultMap id="BaseResultMap" type="com.ai.domain.bo.AuthUser">
    <id column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="real_name" jdbcType="VARCHAR" property="realName" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="CREATE_WHERE" jdbcType="TINYINT" property="createWhere" />
    <result column="pid" jdbcType="VARCHAR" property="pid" />
  </resultMap>
  <sql id="Base_Column_List">
    `uid`, username, `password`, salt, real_name, avatar, phone, email, sex, `status`,
    CREATE_TIME, UPDATE_TIME, CREATE_WHERE, pid
  </sql>
  <select id="selectUserRoles" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT GROUP_CONCAT(rol.CODE) AS Roles
    FROM auth_user usr
    JOIN auth_user_role uro ON usr.uid = uro.USER_ID
    JOIN auth_role rol ON uro.ROLE_ID = rol.ID
    WHERE usr.uid = #{uid,jdbcType=VARCHAR}
  </select>

  <select id="selectUserRolesId" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT min(rol.ID)
    FROM auth_user usr
    JOIN auth_user_role uro ON usr.uid = uro.USER_ID
    JOIN auth_role rol ON uro.ROLE_ID = rol.ID
    WHERE usr.uid =  #{uid,jdbcType=VARCHAR}
  </select>

  <select id="selectByUniqueKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT uid, username, password, salt, real_name, avatar, phone, email, sex, status, CREATE_TIME,
    UPDATE_TIME, CREATE_WHERE
    FROM auth_user user
    WHERE user.uid = #{appId,jdbcType=VARCHAR} or user.phone = #{appId,jdbcType=VARCHAR} or user.email = #{appId,jdbcType=VARCHAR}
  </select>

  <select id="selectUserList" resultMap="BaseResultMap">
    select uid,username,"" as password,"" as salt,real_name,avatar,phone,email,sex,status,create_time,update_time,create_where
    from auth_user
  </select>

  <select id="selectUserAndRoleList" resultMap="BaseResultMap">
    select uid,username,"" as password,"" as salt,real_name,avatar,phone,email,
    sex,status,create_time,update_time,create_where
    from auth_user a
    where 1=1
      AND pid = #{pid}
      AND uid like CONCAT('%',#{uid},'%')
  </select>

  <select id="selectUsers" resultMap="BaseResultMap">
    select uid,username,"" as password,"" as salt,real_name,avatar,phone,email,
    sex,status,create_time,update_time,create_where from auth_user
    where 1=1
    <if test="pid != null and pid != ''">
      AND pid = #{pid}
    </if>
    union
    select uid,username,"" as password,"" as salt,real_name,avatar,phone,email,
    sex,status,create_time,update_time,create_where from auth_user where 1=1
      AND uid =#{uid}
  </select>

  <select id="selectUserListByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.uid,b.username,"" as password,"" as salt,b.real_name,b.avatar,b.phone,b.email,b.sex,b.status,b.create_time,b.update_time,b.create_where
    from auth_user_role a
    join auth_user b on a.user_id = b.uid
    where a.role_id = #{roleId}
  </select>

  <select id="selectUserListExtendByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select b.uid,b.username,"" as password,"" as salt,b.real_name,b.avatar,b.phone,b.email,b.sex,b.status,b.create_time,b.update_time,b.create_where
    from auth_user b
	where not exists (
  	   select 1 from auth_user_role c
  	   where b.uid = c.user_id and c.role_id = #{roleId,jdbcType=INTEGER}
	)
  </select>

  <select id="getUserByUidAndPid"  resultMap="BaseResultMap">

    select a.*
    from auth_user a
    where a.uid=#{uid} AND a.pid = #{pid}

  </select>

  <select id="selectUserByTaskUserId" parameterType="java.lang.String" resultMap="BaseResultMap">

    select a.*
    from auth_user a
    where a.uid=#{uid,jdbcType=VARCHAR} AND a.pid = #{pid,jdbcType=VARCHAR}

  </select>

</mapper>